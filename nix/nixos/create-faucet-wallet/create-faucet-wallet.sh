#!/run/current-system/sw/bin/bash
set -euo pipefail

[ $# -eq 0 ] && { echo "No arguments provided.  Use -h for help."; exit 1; }

OUT="create-output.log"
ID="faucet.id"
BYRON_CMD="@cardanoWallet@"
SHELLEY_CMD="@cardanoWallet@"
EXPECT_CMD="@expect@"
JQ_CMD="@jq@"

while getopts 'e:m:p:h' c
do
  case "$c" in
    e) ERA="$OPTARG" ;;
    m) MNEMONIC_PATH="$OPTARG" ;;
    p) PASSPHRASE_PATH="$OPTARG" ;;
    *)
       echo "This command creates a faucet wallet for byron (from a 15 word Icarus style mnemonic) or shelley."
       echo "usage: $0 -e -p [-m] [-h]"
       echo ""
       echo "  -e the era, either \"byron\" or \"shelley\""
       echo "  -m file path to the mnemonic set (autogenerated if not specified)"
       echo "  -p file path to the faucet passphrase"
       exit 0
       ;;
  esac
done

if [ -z "${ERA:-}" ]; then
  echo "-e is a required parameter"
  exit 1
else
  if [ "$ERA" != "byron" ] && [ "$ERA" != "shelley" ]; then
    echo "-e is unrecognized; it must be either \"byron\" or \"shelley\""
    exit 1
  fi
fi

if [ -z "${PASSPHRASE_PATH:-}" ]; then
  echo "-p is a required parameter"
  exit 1
else
  PASSPHRASE="$(cat "$PASSPHRASE_PATH")"
fi

if [ -z "${MNEMONIC_PATH:-}" ]; then
  if [ "$ERA" == "byron" ]; then
    MNEMONIC="${MNEMONIC:-"$($BYRON_CMD reward-phrase generate --size 15)"}"
    echo "Byron wallet generation is no longer supported by cardano-wallet cli"
    exit 1
  else
    MNEMONIC="${MNEMONIC:-"$($SHELLEY_CMD reward-phrase generate)"}"
  fi
else
  MNEMONIC="$(cat "$MNEMONIC_PATH")"
fi

[ -s "$ID" ] && { echo "A faucet wallet id already exists; delete the faucet wallet and id file and retry."; exit 0; }

if [ "$ERA" == "byron" ]; then

  GEN_CMD=$BYRON_CMD MNEMONIC=$MNEMONIC PASSPHRASE=$PASSPHRASE OUT=$OUT $EXPECT_CMD <<- '  END' > /dev/null
    set chan [open $::env(OUT) w]
    set timeout 10
    spawn "$::env(GEN_CMD)" wallet create from-recovery-phrase --wallet-style icarus IcarusFaucetWallet
    sleep 0.1
    expect "Please enter 15 mnemonic words : "
    send -- "$::env(MNEMONIC)\r"
    sleep 0.1
    expect "Please enter a passphrase: "
    send -- "$::env(PASSPHRASE)\r"
    sleep 0.1
    expect "Enter the passphrase a second time: "
    send -- "$::env(PASSPHRASE)\r"
    expect -re "{.*\n+}"
    set KEY $expect_out(0,string)
    puts $chan $KEY
    close $chan
    exit 0
  END
else
  GEN_CMD=$SHELLEY_CMD MNEMONIC=$MNEMONIC PASSPHRASE=$PASSPHRASE OUT=$OUT $EXPECT_CMD <<- '  END' > /dev/null
    set chan [open $::env(OUT) w]
    set timeout 10
    spawn "$::env(GEN_CMD)" wallet create from-recovery-phrase ShelleyFaucetWallet
    sleep 0.1
    expect "Please enter a 15–24 word mnemonic sentence: "
    send -- "$::env(MNEMONIC)\r"
    expect "(Enter a blank line if you do not wish to use a second factor.)"
    sleep 0.1
    expect "Please enter a 9–12 word mnemonic second factor: "
    sleep 0.1
    send -- "\r"
    expect "Please enter a passphrase: "
    send -- "$::env(PASSPHRASE)\r"
    sleep 0.1
    expect "Enter the passphrase a second time: "
    send -- "$::env(PASSPHRASE)\r"
    expect -re "{.*\n+}"
    set KEY $expect_out(0,string)
    puts $chan $KEY
    close $chan
    exit 0
  END
fi

if $JQ_CMD -e '.id' < $OUT > /dev/null; then
  $JQ_CMD -r '.id' < $OUT > "$ID"
else
  echo "Faucet wallet create failed."
  exit 1
fi
exit 0
